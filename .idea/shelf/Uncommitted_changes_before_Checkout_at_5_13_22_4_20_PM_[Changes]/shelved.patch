Index: fifo.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/// @file fifo.c\n/// @brief Contiene l'implementazione delle funzioni\n///         specifiche per la gestione delle FIFO.\n\n#include \"err_exit.h\"\n#include \"fifo.h\"\n#include \"defines.h\"\n\nchar FIFO_path[PATH_MAX]; // path assoluto file FIFO\n\nvoid make_FIFO(char *name)\n{\n    errno = 0;\n    getcwd(FIFO_path, PATH_MAX);\n    strcat(FIFO_path, \"/IPCS/\");\n    strcat(FIFO_path, name);\n\n    int res = mkfifo(FIFO_path, S_IWUSR | S_IRUSR);\n\n    if (res == -1)\n    {\n        if (errno == EEXIST)\n            printf(\"\\nWARNING %s,: %s\\n\",FIFO_path, strerror(errno));\n        else\n            ErrExit(\"mkfifo failed:\");\n    }\n    else\n        printf(\"\\nFIFO: creata in %s\", FIFO_path);\n}\n\nint open_FIFO(char *name, int read_or_write)\n{\n    getcwd(FIFO_path, PATH_MAX);\n    strcat(FIFO_path, \"/IPCS/\");\n    strcat(FIFO_path, name);\n\n    int fd = open(FIFO_path, read_or_write);\n    if (fd == -1)\n    {\n        ErrExit(\"\\nfifo open failed\");\n        return fd;\n    }\n\n    else\n    {\n        printf(\"\\nFIFO: %s aperta con successo\", FIFO_path);\n        fflush(stdout);\n        return fd;\n    }\n}\n\nvoid close_FIFO(int fd, char *name)\n{\n    getcwd(FIFO_path, PATH_MAX);\n    strcat(FIFO_path, \"/IPCS/\");\n    strcat(FIFO_path, name);\n\n    close(fd);\n    unlink(FIFO_path);\n    printf(\"\\nFIFO: %s rimossa\", FIFO_path);\n    fflush(stdout);\n}\n\n\nstruct File_piece file_piece;\n\n void read_FIFO(int FIFO_fd,int dest_fd)\n {\n     char buffer[MSG_BYTES+1];\n     ssize_t byte_read=-1;\n     ssize_t size;\n     //leggo la dimensione della struct\n     byte_read =read(FIFO_fd,&size,sizeof (ssize_t));\n     int piece=0;\n     //leggo il numero del file\n     read(FIFO_fd,&piece,sizeof (int ));\n     printf(\"\\nnumero file %d\\n\\n\",piece);\n     fflush(stdout);\n\n     do{\n\n         if(byte_read==-1)\n             printf(\"\\nWARNING FIFO nothing read\");\n         else\n         {\n             byte_read= read(FIFO_fd,buffer,size);\n             if(byte_read==size)\n             {\n                 //buffer[size]='\\0';\n                 write(dest_fd,buffer,byte_read);\n             }\n             else\n             {\n                 buffer[size]='\\0';\n                 printf(\"WARNING FIFO byte read not equal to byte write\");\n             }\n         }\n     }while(byte_read>0);\n\n\n }\n void write_FIFO(int FIFO_fd,int source_fd,int file_number)\n {\n    do {\n        file_piece.piece=file_number;\n\n        file_piece.size=read(source_fd,file_piece.content,sizeof (file_piece.content));\n        if(file_piece.size==-1)\n            ErrExit(\"\\nFIFO write failed\");\n        if(file_piece.size>0)\n        {\n            ssize_t byte_to_send=sizeof (file_piece.size)+sizeof(file_piece.piece)+file_piece.size;\n\n            ssize_t byte_write=write(FIFO_fd,&file_piece,byte_to_send);\n            if(byte_write!=byte_to_send)\n                printf(\"\\nWARNING FIFO byte write not equal to byte read\");\n        }\n\n    }while(file_piece.size>0);\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
===================================================================
diff --git a/fifo.c b/fifo.c
--- a/fifo.c	
+++ b/fifo.c	
@@ -133,5 +133,3 @@
 
 
 
-
-
Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>CFLAGS   = -Wall -std=gnu99\nINCLUDES = -I .\nOBJDIR   = obj\n\nCLIENT_SRCS = defines.c err_exit.c shared_memory.c semaphore.c fifo.c client_0.c\nCLIENT_OBJS = $(addprefix $(OBJDIR)/, $(CLIENT_SRCS:.c=.o))\n\nSERVER_SRCS = defines.c err_exit.c shared_memory.c semaphore.c fifo.c server.c\nSERVER_OBJS = $(addprefix $(OBJDIR)/, $(SERVER_SRCS:.c=.o))\n\nall: $(OBJDIR) client_0 server\n\nclient_0: $(CLIENT_OBJS)\n\t@echo \"Making executable: \"$@\n\t@$(CC) $^ -o $@  -lm\n\nserver: $(SERVER_OBJS)\n\t@echo \"Making executable: \"$@\n\t@$(CC) $^ -o $@  -lm\n\n\n$(OBJDIR):\n\t@mkdir -p $(OBJDIR)\n\n$(OBJDIR)/%.o: %.c\n\t$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ -c $<\n\nclean:\n\t@rm -vf ${CLIENT_OBJS}\n\t@rm -vf ${SERVER_OBJS}\n\t@rm -vf client_0\n\t@rm -vf server\n\t@rm -rf ${OBJDIR}\n\t@ipcrm -a\n\t@echo \"Removed object files and executables...\"\n\n.PHONY: run clean\n
===================================================================
diff --git a/Makefile b/Makefile
--- a/Makefile	
+++ b/Makefile	
@@ -1,4 +1,4 @@
-CFLAGS   = -Wall -std=gnu99
+CFLAGS   = -Wall -g -std=gnu99
 INCLUDES = -I .
 OBJDIR   = obj
 
